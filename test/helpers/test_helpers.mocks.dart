// Mocks generated by Mockito 5.4.4 from annotations
// in brana/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i14;

import 'package:brana/core/database/dao/task_boards_dao.dart' as _i5;
import 'package:brana/core/database/dao/task_comments_dao.dart' as _i7;
import 'package:brana/core/database/dao/tasks_dao.dart' as _i6;
import 'package:brana/core/database/db/app_database.dart' as _i26;
import 'package:brana/core/database/models/app_models.dart' as _i20;
import 'package:brana/core/database/repository/task_repository.dart' as _i25;
import 'package:brana/core/services/analytics_service.dart' as _i17;
import 'package:brana/core/services/date_formater.dart' as _i21;
import 'package:brana/core/services/notification_service.dart' as _i18;
import 'package:brana/core/services/shared_preferences_service.dart' as _i4;
import 'package:brana/core/services/task_service.dart' as _i19;
import 'package:flutter/material.dart' as _i11;
import 'package:logger/logger.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i22;
import 'package:sqflite/sqflite.dart' as _i9;
import 'package:stacked/stacked.dart' as _i2;
import 'package:stacked_services/src/bottom_sheet/bottom_sheet_service.dart'
    as _i12;
import 'package:stacked_services/src/dialog/dialog_service.dart' as _i15;
import 'package:stacked_services/src/models/overlay_request.dart' as _i16;
import 'package:stacked_services/src/models/overlay_response.dart' as _i13;
import 'package:stacked_services/src/navigation/router_service.dart' as _i10;
import 'package:stacked_services/src/snackbar/snackbar_config.dart' as _i24;
import 'package:stacked_services/src/snackbar/snackbar_service.dart' as _i23;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRootStackRouter_0 extends _i1.SmartFake
    implements _i2.RootStackRouter {
  _FakeRootStackRouter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteData_1 extends _i1.SmartFake implements _i2.RouteData {
  _FakeRouteData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoutingController_2 extends _i1.SmartFake
    implements _i2.RoutingController {
  _FakeRoutingController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_3 extends _i1.SmartFake implements _i3.Logger {
  _FakeLogger_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferencesService_4 extends _i1.SmartFake
    implements _i4.SharedPreferencesService {
  _FakeSharedPreferencesService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskBoardDao_5 extends _i1.SmartFake implements _i5.TaskBoardDao {
  _FakeTaskBoardDao_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTasksDao_6 extends _i1.SmartFake implements _i6.TasksDao {
  _FakeTasksDao_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskCommentsDao_7 extends _i1.SmartFake
    implements _i7.TaskCommentsDao {
  _FakeTaskCommentsDao_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_8<T> extends _i1.SmartFake
    implements _i8.StreamController<T> {
  _FakeStreamController_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_9 extends _i1.SmartFake
    implements _i9.DatabaseExecutor {
  _FakeDatabaseExecutor_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RouterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouterService extends _i1.Mock implements _i10.RouterService {
  @override
  _i2.RootStackRouter get router => (super.noSuchMethod(
        Invocation.getter(#router),
        returnValue: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
        returnValueForMissingStub: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
      ) as _i2.RootStackRouter);

  @override
  set router(_i2.RootStackRouter? _router) => super.noSuchMethod(
        Invocation.setter(
          #router,
          _router,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.StackedPage<dynamic>> get stack => (super.noSuchMethod(
        Invocation.getter(#stack),
        returnValue: <_i2.StackedPage<dynamic>>[],
        returnValueForMissingStub: <_i2.StackedPage<dynamic>>[],
      ) as List<_i2.StackedPage<dynamic>>);

  @override
  _i2.RouteData get topRoute => (super.noSuchMethod(
        Invocation.getter(#topRoute),
        returnValue: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
        returnValueForMissingStub: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
      ) as _i2.RouteData);

  @override
  dynamic setRouter(_i2.RootStackRouter? router) => super.noSuchMethod(
        Invocation.method(
          #setRouter,
          [router],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<dynamic> navigateTo(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);

  @override
  _i8.Future<void> navigateToPath({
    required String? path,
    bool? includePrefixMatches = false,
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToPath,
          [],
          {
            #path: path,
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<T?> navigateWithTransition<T extends Object?>(
    _i11.Widget? widget, {
    _i11.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  _i8.Future<T?> replaceWith<T extends Object?>(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);

  @override
  _i8.Future<void> clearStackAndShow(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> clearStackAndShowView(
    _i11.Widget? widget, {
    _i11.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void popForced<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #popForced,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<bool> pop<T extends Object?>([T? result]) => (super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void back<T extends Object?>({T? result}) => super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {#result: result},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RoutingController topMostRouter({bool? ignorePagelessRoutes = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #topMostRouter,
          [],
          {#ignorePagelessRoutes: ignorePagelessRoutes},
        ),
        returnValue: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
        returnValueForMissingStub: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
      ) as _i2.RoutingController);

  @override
  _i8.Future<T?> pushNativeRoute<T extends Object?>(_i11.Route<T>? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNativeRoute,
          [route],
        ),
        returnValue: _i8.Future<T?>.value(),
        returnValueForMissingStub: _i8.Future<T?>.value(),
      ) as _i8.Future<T?>);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i12.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i12.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i13.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i8.Future<_i13.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i8.Future<_i13.SheetResponse<dynamic>?>.value(),
      ) as _i8.Future<_i13.SheetResponse<dynamic>?>);

  @override
  _i8.Future<_i13.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i14.Color? barrierColor = const _i14.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i8.Future<_i13.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i8.Future<_i13.SheetResponse<T>?>.value(),
      ) as _i8.Future<_i13.SheetResponse<T>?>);

  @override
  void completeSheet(_i13.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i15.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i15.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i11.Widget Function(
      _i11.BuildContext,
      _i16.DialogRequest<dynamic>,
      dynamic Function(_i13.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i13.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i14.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i14.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i15.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i8.Future<_i13.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i8.Future<_i13.DialogResponse<dynamic>?>.value(),
      ) as _i8.Future<_i13.DialogResponse<dynamic>?>);

  @override
  _i8.Future<_i13.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i14.Color? barrierColor = const _i14.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i8.Future<_i13.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i8.Future<_i13.DialogResponse<T>?>.value(),
      ) as _i8.Future<_i13.DialogResponse<T>?>);

  @override
  _i8.Future<_i13.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i14.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i14.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i15.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i8.Future<_i13.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i8.Future<_i13.DialogResponse<dynamic>?>.value(),
      ) as _i8.Future<_i13.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i13.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i17.AnalyticsService {}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i18.NotificationService {
  @override
  _i3.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#log),
        ),
      ) as _i3.Logger);

  @override
  _i8.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> dismiss() => (super.noSuchMethod(
        Invocation.method(
          #dismiss,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> cancelNotification(int? id) => (super.noSuchMethod(
        Invocation.method(
          #cancelNotification,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> scheduleNotification({
    required int? id,
    required DateTime? time,
    required String? title,
    required String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotification,
          [],
          {
            #id: id,
            #time: time,
            #title: title,
            #description: description,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i19.TaskService {
  @override
  _i3.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#log),
        ),
      ) as _i3.Logger);

  @override
  _i8.Future<int> addTaskBoard({
    required String? title,
    required String? desc,
    required DateTime? dueDate,
    required bool? isReminder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTaskBoard,
          [],
          {
            #title: title,
            #desc: desc,
            #dueDate: dueDate,
            #isReminder: isReminder,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<_i20.TaskBoard>> getTaskBoards() => (super.noSuchMethod(
        Invocation.method(
          #getTaskBoards,
          [],
        ),
        returnValue: _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
      ) as _i8.Future<List<_i20.TaskBoard>>);

  @override
  _i8.Future<List<_i20.Task>> getTasks(int? boardId) => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [boardId],
        ),
        returnValue: _i8.Future<List<_i20.Task>>.value(<_i20.Task>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.Task>>.value(<_i20.Task>[]),
      ) as _i8.Future<List<_i20.Task>>);

  @override
  _i8.Future<int> addTask({
    required int? boardId,
    required String? title,
    required String? description,
    required int? prevIndex,
    required _i20.TaskPriority? priority,
    required DateTime? dueDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [],
          {
            #boardId: boardId,
            #title: title,
            #description: description,
            #prevIndex: prevIndex,
            #priority: priority,
            #dueDate: dueDate,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<void> updateTaskBoard(_i20.TaskBoard? board) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskBoard,
          [board],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTaskBoard(_i20.TaskBoard? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTaskBoard,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateTask(_i20.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTask(_i20.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> completeTaskBoard(int? id) => (super.noSuchMethod(
        Invocation.method(
          #completeTaskBoard,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> addComment(_i20.TaskComment? comment) => (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateComment(_i20.TaskComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateComment,
          [comment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i20.TaskComment>> getComments(int? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [taskId],
        ),
        returnValue:
            _i8.Future<List<_i20.TaskComment>>.value(<_i20.TaskComment>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.TaskComment>>.value(<_i20.TaskComment>[]),
      ) as _i8.Future<List<_i20.TaskComment>>);

  @override
  _i8.Future<void> deleteComment(_i20.TaskComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [comment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i20.TaskBoard>> getCompletedTaskBoard() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedTaskBoard,
          [],
        ),
        returnValue: _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
      ) as _i8.Future<List<_i20.TaskBoard>>);
}

/// A class which mocks [DateFormatter].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateFormatter extends _i1.Mock implements _i21.DateFormatter {
  @override
  String formatTime(DateTime? dateTime) => (super.noSuchMethod(
        Invocation.method(
          #formatTime,
          [dateTime],
        ),
        returnValue: _i22.dummyValue<String>(
          this,
          Invocation.method(
            #formatTime,
            [dateTime],
          ),
        ),
        returnValueForMissingStub: _i22.dummyValue<String>(
          this,
          Invocation.method(
            #formatTime,
            [dateTime],
          ),
        ),
      ) as String);

  @override
  String dateToReadable(DateTime? dateTime) => (super.noSuchMethod(
        Invocation.method(
          #dateToReadable,
          [dateTime],
        ),
        returnValue: _i22.dummyValue<String>(
          this,
          Invocation.method(
            #dateToReadable,
            [dateTime],
          ),
        ),
        returnValueForMissingStub: _i22.dummyValue<String>(
          this,
          Invocation.method(
            #dateToReadable,
            [dateTime],
          ),
        ),
      ) as String);

  @override
  String timeToReadable(DateTime? dateTime) => (super.noSuchMethod(
        Invocation.method(
          #timeToReadable,
          [dateTime],
        ),
        returnValue: _i22.dummyValue<String>(
          this,
          Invocation.method(
            #timeToReadable,
            [dateTime],
          ),
        ),
        returnValueForMissingStub: _i22.dummyValue<String>(
          this,
          Invocation.method(
            #timeToReadable,
            [dateTime],
          ),
        ),
      ) as String);
}

/// A class which mocks [SnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackbarService extends _i1.Mock implements _i23.SnackbarService {
  @override
  bool get isSnackbarOpen => (super.noSuchMethod(
        Invocation.getter(#isSnackbarOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void registerSnackbarConfig(_i24.SnackbarConfig? config) =>
      super.noSuchMethod(
        Invocation.method(
          #registerSnackbarConfig,
          [config],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomMainButtonBuilder({
    dynamic variant,
    _i11.Widget Function(
      String?,
      Function?,
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomMainButtonBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomSnackbarConfig({
    required dynamic variant,
    _i24.SnackbarConfig? config,
    _i24.SnackbarConfig Function()? configBuilder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomSnackbarConfig,
          [],
          {
            #variant: variant,
            #config: config,
            #configBuilder: configBuilder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showSnackbar({
    String? title = r'',
    required String? message,
    dynamic Function(dynamic)? onTap,
    Duration? duration,
    String? mainButtonTitle,
    void Function()? onMainButtonTapped,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showSnackbar,
          [],
          {
            #title: title,
            #message: message,
            #onTap: onTap,
            #duration: duration,
            #mainButtonTitle: mainButtonTitle,
            #onMainButtonTapped: onMainButtonTapped,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<dynamic>? showCustomSnackBar({
    required String? message,
    _i11.TextStyle? messageTextStyle,
    required dynamic variant,
    String? title,
    _i11.TextStyle? titleTextStyle,
    String? mainButtonTitle,
    _i11.ButtonStyle? mainButtonStyle,
    void Function()? onMainButtonTapped,
    Function? onTap,
    Duration? duration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSnackBar,
          [],
          {
            #message: message,
            #messageTextStyle: messageTextStyle,
            #variant: variant,
            #title: title,
            #titleTextStyle: titleTextStyle,
            #mainButtonTitle: mainButtonTitle,
            #mainButtonStyle: mainButtonStyle,
            #onMainButtonTapped: onMainButtonTapped,
            #onTap: onTap,
            #duration: duration,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<dynamic>?);

  @override
  _i8.Future<void> closeSnackbar() => (super.noSuchMethod(
        Invocation.method(
          #closeSnackbar,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [SharedPreferencesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesService extends _i1.Mock
    implements _i4.SharedPreferencesService {
  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isDarkMode(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isDarkMode,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get startUpCheck => (super.noSuchMethod(
        Invocation.getter(#startUpCheck),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set startUpCheck(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #startUpCheck,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i4.SharedPreferencesService> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<_i4.SharedPreferencesService>.value(
            _FakeSharedPreferencesService_4(
          this,
          Invocation.method(
            #init,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.SharedPreferencesService>.value(
                _FakeSharedPreferencesService_4(
          this,
          Invocation.method(
            #init,
            [],
          ),
        )),
      ) as _i8.Future<_i4.SharedPreferencesService>);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i25.TaskRepository {
  @override
  _i3.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#log),
        ),
      ) as _i3.Logger);

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> addTask(_i20.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> addTaskBoard(_i20.TaskBoard? taskBoard) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTaskBoard,
          [taskBoard],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateTaskBoard(_i20.TaskBoard? taskBoard) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskBoard,
          [taskBoard],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTaskBoard(_i20.TaskBoard? taskBoard) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTaskBoard,
          [taskBoard],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTask(_i20.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i20.TaskBoard>> getTaskBoards() => (super.noSuchMethod(
        Invocation.method(
          #getTaskBoards,
          [],
        ),
        returnValue: _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
      ) as _i8.Future<List<_i20.TaskBoard>>);

  @override
  _i8.Future<List<_i20.Task>> getTasks(int? boardId) => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [boardId],
        ),
        returnValue: _i8.Future<List<_i20.Task>>.value(<_i20.Task>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.Task>>.value(<_i20.Task>[]),
      ) as _i8.Future<List<_i20.Task>>);

  @override
  _i8.Future<void> updateTask(_i20.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> completeTaskBoard(int? id) => (super.noSuchMethod(
        Invocation.method(
          #completeTaskBoard,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i20.TaskComment>> getComments(int? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [taskId],
        ),
        returnValue:
            _i8.Future<List<_i20.TaskComment>>.value(<_i20.TaskComment>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.TaskComment>>.value(<_i20.TaskComment>[]),
      ) as _i8.Future<List<_i20.TaskComment>>);

  @override
  _i8.Future<void> addComment(_i20.TaskComment? comment) => (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateComment(_i20.TaskComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateComment,
          [comment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteComment(_i20.TaskComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [comment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i20.TaskBoard>> getCompletedTaskBoard() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedTaskBoard,
          [],
        ),
        returnValue: _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
      ) as _i8.Future<List<_i20.TaskBoard>>);
}

/// A class which mocks [TaskDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDatabase extends _i1.Mock implements _i26.TaskDatabase {
  @override
  _i5.TaskBoardDao get taskBoardDao => (super.noSuchMethod(
        Invocation.getter(#taskBoardDao),
        returnValue: _FakeTaskBoardDao_5(
          this,
          Invocation.getter(#taskBoardDao),
        ),
        returnValueForMissingStub: _FakeTaskBoardDao_5(
          this,
          Invocation.getter(#taskBoardDao),
        ),
      ) as _i5.TaskBoardDao);

  @override
  _i6.TasksDao get tasksDao => (super.noSuchMethod(
        Invocation.getter(#tasksDao),
        returnValue: _FakeTasksDao_6(
          this,
          Invocation.getter(#tasksDao),
        ),
        returnValueForMissingStub: _FakeTasksDao_6(
          this,
          Invocation.getter(#tasksDao),
        ),
      ) as _i6.TasksDao);

  @override
  _i7.TaskCommentsDao get taskCommentsDao => (super.noSuchMethod(
        Invocation.getter(#taskCommentsDao),
        returnValue: _FakeTaskCommentsDao_7(
          this,
          Invocation.getter(#taskCommentsDao),
        ),
        returnValueForMissingStub: _FakeTaskCommentsDao_7(
          this,
          Invocation.getter(#taskCommentsDao),
        ),
      ) as _i7.TaskCommentsDao);

  @override
  _i8.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_8<String>(
          this,
          Invocation.getter(#changeListener),
        ),
        returnValueForMissingStub: _FakeStreamController_8<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i8.StreamController<String>);

  @override
  set changeListener(_i8.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_9(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeDatabaseExecutor_9(
          this,
          Invocation.getter(#database),
        ),
      ) as _i9.DatabaseExecutor);

  @override
  set database(_i9.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [TasksDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksDao extends _i1.Mock implements _i6.TasksDao {
  @override
  _i8.Future<List<_i20.Task>> getTasks(int? boardId) => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [boardId],
        ),
        returnValue: _i8.Future<List<_i20.Task>>.value(<_i20.Task>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.Task>>.value(<_i20.Task>[]),
      ) as _i8.Future<List<_i20.Task>>);

  @override
  _i8.Future<void> addTask(_i20.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateTask(_i20.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTask(_i20.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [TaskBoardDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBoardDao extends _i1.Mock implements _i5.TaskBoardDao {
  @override
  _i8.Future<List<_i20.TaskBoard>> getTaskBoards() => (super.noSuchMethod(
        Invocation.method(
          #getTaskBoards,
          [],
        ),
        returnValue: _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
      ) as _i8.Future<List<_i20.TaskBoard>>);

  @override
  _i8.Future<List<_i20.TaskBoard>> getCompletedTaskBoards() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedTaskBoards,
          [],
        ),
        returnValue: _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.TaskBoard>>.value(<_i20.TaskBoard>[]),
      ) as _i8.Future<List<_i20.TaskBoard>>);

  @override
  _i8.Future<void> addTaskBoard(_i20.TaskBoard? taskBoard) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTaskBoard,
          [taskBoard],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateTaskBoard(_i20.TaskBoard? taskBoard) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskBoard,
          [taskBoard],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTaskBoard(_i20.TaskBoard? taskBoard) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTaskBoard,
          [taskBoard],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> completeTaskBoard(int? id) => (super.noSuchMethod(
        Invocation.method(
          #completeTaskBoard,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [TaskCommentsDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskCommentsDao extends _i1.Mock implements _i7.TaskCommentsDao {
  @override
  _i8.Future<List<_i20.TaskComment>> getComments(int? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [taskId],
        ),
        returnValue:
            _i8.Future<List<_i20.TaskComment>>.value(<_i20.TaskComment>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i20.TaskComment>>.value(<_i20.TaskComment>[]),
      ) as _i8.Future<List<_i20.TaskComment>>);

  @override
  _i8.Future<void> addComment(_i20.TaskComment? comment) => (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateComment(_i20.TaskComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateComment,
          [comment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteComment(_i20.TaskComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [comment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
